package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}
// Seccion de terminales
terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D IGUAL, DIFERENTE, MENORQ, MAYORQ, MAYORIGUALQ, MENORIGUALQ;
terminal String AND, OR, NOT;

// Seccion de no terminales 
nonterminal NodoC3D inicial, sentencia,oprel,  expresion;  
nonterminal NodoC3DRel condicion;
nonterminal  eme, ene;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence left IGUAL, DIFERENTE, MENORQ, MAYORQ, MENORIGUALQ, MAYORIGUALQ;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 
 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} sentencia:sent                
                    {: 
                        ControlC3D.agregarC3D( sent.getResultadoFinal());
                        RESULT = sent;
                    :}
;
sentencia   ::=  condicion:nodat 
                    {: 
                        RESULT = nodat;
                    :}
                    | expresion:exp
                    {: 
                        RESULT = exp;
                    :}
;
condicion   ::= condicion:izq OR:or {: 
                                         ControlC3D.agregarC3D(izq.getEtiquetaFalsa()+" : \n" ); 
                                    :} condicion:der
                    {: 
                        NodoC3DRel nodo = new NodoC3DRel("COND_OR");
                        nodo.setEtiquetaVerdadera(izq.getEtiquetaVerdadera()+","+ der.getEtiquetaVerdadera() );
                        nodo.setEtiquetaFalsa(der.getEtiquetaFalsa());
                        RESULT = nodo;
                    :}
            | condicion:izq AND:and {: 
                                        ControlC3D.agregarC3D(izq.getEtiquetaVerdadera()+" : \n"); 
                                    :} condicion:der
                    {: 
                        NodoC3DRel nodo = new NodoC3DRel("COND_AND");
                        nodo.setEtiquetaVerdadera(der.getEtiquetaVerdadera());
                        nodo.setEtiquetaFalsa(izq.getEtiquetaFalsa()+","+der.getEtiquetaFalsa());
                        RESULT = nodo;
                    :}
            | NOT:not condicion:nodat
                    {: 
                        String eti = nodat.getEtiquetaVerdadera();
                        nodat.setEtiquetaVerdadera(nodat.getEtiquetaFalsa());
                        nodat.setEtiquetaFalsa(eti);
                        RESULT = nodat;
                    :}
            | PAR_IZQ condicion:nodat PAR_DER 
                    {:
                        RESULT =nodat; 
                     :}
            | expresion:izq oprel:op expresion:der
                    {: 
                        NodoC3DRel nodo = new NodoC3DRel("");
                        nodo.setEtiquetaVerdadera(ControlC3D.generaETQ());
                        nodo.setEtiquetaFalsa(ControlC3D.generaETQ());                       
                        String c3d = " if ( " + izq.getCad() +" " +op.getCad() +" "+ der.getCad() + ") goto " + nodo.getEtiquetaVerdadera()+ " ;\n  goto "+ nodo.getEtiquetaFalsa() +" ;\n" ;
                        ControlC3D.agregarC3D(c3d); 
                        RESULT = nodo;
                    :}
;

oprel   ::=  IGUAL            
                    {: RESULT = new NodoC3D("=="); :}
            |   DIFERENTE  
                    {: RESULT = new NodoC3D("!="); :}
            |   MENORQ 
                    {: RESULT = new NodoC3D("<"); :}
            |   MAYORQ
                    {: RESULT = new NodoC3D(">"); :}
            |   MENORIGUALQ
                    {: RESULT = new NodoC3D("<="); :}
            |   MAYORIGUALQ  
                    {: RESULT = new NodoC3D(">="); :}
            ;



expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;